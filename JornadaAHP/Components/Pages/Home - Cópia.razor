@page "/teste"
@using JornadaAHP.Data
@using JornadaAHP.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext context

<h1 class="align-content-center">Critérios</h1>

<!-- Campo para inserir o valor da força desejada -->
<div class="mb-3">
    @* <RadzenLabel @onchange="calcularMassa()" Text="Comprimento da Haste" /> *@
    <RadzenNumeric @bind-Value="distancia" Min="0" />
    <RadzenLabel Text="Valor da massa" />
    <RadzenNumeric @bind-Value="massa" Min="0" />
</div><div class="mb-3">
    <RadzenLabel Text="Valor da massa" />
    <RadzenNumeric Disabled="true" @bind-Value="valorForcaDesejada" Min="0" />
</div>

<!-- Critérios de avaliação -->
<RadzenRow class="mb-2" Gap="1rem">
    <RadzenColumn class="">
        <RadzenCard>
            <RadzenLabel Text="Preço"></RadzenLabel>
            <RadzenRadioButtonList @bind-Value="@preco" TValue="int">
                <Items>
                    <RadzenRadioButtonListItem Text="1" Value="1" />
                    <RadzenRadioButtonListItem Text="2" Value="2" />
                    <RadzenRadioButtonListItem Text="3" Value="3" />
                    <RadzenRadioButtonListItem Text="4" Value="4" />
                    <RadzenRadioButtonListItem Text="5" Value="5" />
                    <RadzenRadioButtonListItem Text="6" Value="6" />
                    <RadzenRadioButtonListItem Text="7" Value="7" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn class="">
        <RadzenCard>
            <RadzenLabel Text="Velocidade"></RadzenLabel>
            <RadzenRadioButtonList @bind-Value="@velocidade" TValue="int">
                <Items>
                    <RadzenRadioButtonListItem Text="1" Value="1" />
                    <RadzenRadioButtonListItem Text="2" Value="2" />
                    <RadzenRadioButtonListItem Text="3" Value="3" />
                    <RadzenRadioButtonListItem Text="4" Value="4" />
                    <RadzenRadioButtonListItem Text="5" Value="5" />
                    <RadzenRadioButtonListItem Text="6" Value="6" />
                    <RadzenRadioButtonListItem Text="7" Value="7" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn class="">
        <RadzenCard>
            <RadzenLabel Text="Força"></RadzenLabel>
            <RadzenRadioButtonList @bind-Value="@forca" TValue="int">
                <Items>
                    <RadzenRadioButtonListItem Text="1" Value="1" />
                    <RadzenRadioButtonListItem Text="2" Value="2" />
                    <RadzenRadioButtonListItem Text="3" Value="3" />
                    <RadzenRadioButtonListItem Text="4" Value="4" />
                    <RadzenRadioButtonListItem Text="5" Value="5" />
                    <RadzenRadioButtonListItem Text="6" Value="6" />
                    <RadzenRadioButtonListItem Text="7" Value="7" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn class="">
        <RadzenCard>
            <RadzenLabel Text="Prazo"></RadzenLabel>
            <RadzenRadioButtonList @bind-Value="@prazo" TValue="int">
                <Items>
                    <RadzenRadioButtonListItem Text="1" Value="1" />
                    <RadzenRadioButtonListItem Text="2" Value="2" />
                    <RadzenRadioButtonListItem Text="3" Value="3" />
                    <RadzenRadioButtonListItem Text="4" Value="4" />
                    <RadzenRadioButtonListItem Text="5" Value="5" />
                    <RadzenRadioButtonListItem Text="6" Value="6" />
                    <RadzenRadioButtonListItem Text="7" Value="7" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<!-- Matriz de Comparação dos Critérios -->
<h2 class="mt-5">Matriz de Comparação dos Critérios</h2>
<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th>Critério</th>
            <th>Preço</th>
            <th>Velocidade</th>
            <th>Força</th>
            <th>Prazo</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Preço</td>
            <td>@(VetorDeCriterios[0, 0].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[0, 1].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[0, 2].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[0, 3].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Velocidade</td>
            <td>@(VetorDeCriterios[1, 0].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[1, 1].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[1, 2].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[1, 3].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Força</td>
            <td>@(VetorDeCriterios[2, 0].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[2, 1].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[2, 2].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[2, 3].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Prazo</td>
            <td>@(VetorDeCriterios[3, 0].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[3, 1].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[3, 2].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[3, 3].ToString("0.00"))</td>
        </tr>
        <tr>
            <td><strong>Total Coluna</strong></td>
            <td>@(VetorDeCriterios[4, 0].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[4, 1].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[4, 2].ToString("0.00"))</td>
            <td>@(VetorDeCriterios[4, 3].ToString("0.00"))</td>
        </tr>
    </tbody>
</table>

<!-- Tabela de Valores Normalizados -->
<h2 class="mt-5">Matriz Normalizada dos Critérios</h2>
<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th>Critério</th>
            <th>Preço</th>
            <th>Velocidade</th>
            <th>Força</th>
            <th>Prazo</th>
            <th>Peso Médio</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Preço</td>
            <td>@(MatrizNormalizada[0, 0].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[0, 1].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[0, 2].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[0, 3].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[0, 4].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Velocidade</td>
            <td>@(MatrizNormalizada[1, 0].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[1, 1].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[1, 2].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[1, 3].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[1, 4].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Força</td>
            <td>@(MatrizNormalizada[2, 0].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[2, 1].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[2, 2].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[2, 3].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[2, 4].ToString("0.00"))</td>
        </tr>
        <tr>
            <td>Prazo</td>
            <td>@(MatrizNormalizada[3, 0].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[3, 1].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[3, 2].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[3, 3].ToString("0.00"))</td>
            <td>@(MatrizNormalizada[3, 4].ToString("0.00"))</td>
        </tr>
    </tbody>
</table>
<div class="d-flex justify-content-center align-items-center mt-5">
    <RadzenButton Variant="Variant.Flat" Click="@atualizar" Text="Atualizar Tudo" ButtonStyle="ButtonStyle.Success" />
</div>

<div class="d-flex justify-content-center align-items-center mt-5">
    <RadzenButton Variant="Variant.Flat" Click="@AtualizarVetorDeCriterios" Text="Atualizar Critérios" ButtonStyle="ButtonStyle.Success" />
</div>

<div class="d-flex justify-content-center align-items-center mt-5">
    <RadzenButton Variant="Variant.Flat" Click="@CalcularPesos" Text="Calcular melhor motor" ButtonStyle="ButtonStyle.Success" />
</div>

<h2 class="mt-5">Pontuação dos Motores por Critério</h2>
<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th>Motor</th>
            <th>Preço</th>
            <th>Velocidade</th>
            <th>Força</th>
            <th>Prazo</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var motor in motoresFiltrados)
        {
            <tr>
                <td>@motor.PartNumber</td>
                <td>@motor.Valor</td>
                <td>@motor.RpmMaximo</td>
                <td>@motor.ForcaMaxima</td>
                <td>@motor.Prazo</td>
                
            </tr>
        }
    </tbody>
    </table>
<h2 class="mt-5">Pontuacao Total</h2>
<table class="table table-bordered mt-3">
    <thead>
        <tr>
            <th>Motor</th>
            <th>Pontuação Total</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var motor in MotoresComPontuacao)
        {
            <tr>
                <td>@motor.PartNumber</td>
                <td>@motor.Pontuacao</td>

            </tr>
        }
    </tbody>
</table>

@code {
    int preco = 1;
    int velocidade = 1;
    int forca = 1;
    int prazo = 1;

    decimal massa = 1.8M;
    decimal distancia = 8;
    decimal valorForcaDesejada = 0;
    List<Motor> motoresFiltrados = new List<Motor>();
    List<Motor> MotoresComPontuacao = new List<Motor>();
    List<Motor> motores = new List<Motor>();

    decimal[,] VetorDeCriterios = new decimal[5, 4];
    decimal[,] MatrizNormalizada = new decimal[4, 5];

    protected override async Task OnInitializedAsync()
    {
        motores = await context.Motores.ToListAsync();
    }

    void atualizar()
    {
        AtualizarVetorDeCriterios();
        CalcularMatrizNormalizada();
        CalcularPesoMedio();
        CalcularPontuacao();
    }
    void calcularMassa()
    {
        valorForcaDesejada = massa * distancia;
    }

    void AtualizarVetorDeCriterios()
    {
        // Definindo os valores da matriz com base nos critérios selecionados
        VetorDeCriterios[0, 0] = (decimal)preco / preco;
        VetorDeCriterios[0, 1] = (decimal)preco / velocidade;
        VetorDeCriterios[0, 2] = (decimal)preco / forca;
        VetorDeCriterios[0, 3] = (decimal)preco / prazo;

        VetorDeCriterios[1, 0] = (decimal)velocidade / preco;
        VetorDeCriterios[1, 1] = (decimal)velocidade / velocidade;
        VetorDeCriterios[1, 2] = (decimal)velocidade / forca;
        VetorDeCriterios[1, 3] = (decimal)velocidade / prazo;

        VetorDeCriterios[2, 0] = (decimal)forca / preco;
        VetorDeCriterios[2, 1] = (decimal)forca / velocidade;
        VetorDeCriterios[2, 2] = (decimal)forca / forca;
        VetorDeCriterios[2, 3] = (decimal)forca / prazo;

        VetorDeCriterios[3, 0] = (decimal)prazo / preco;
        VetorDeCriterios[3, 1] = (decimal)prazo / velocidade;
        VetorDeCriterios[3, 2] = (decimal)prazo / forca;
        VetorDeCriterios[3, 3] = (decimal)prazo / prazo;

        // Calculando a soma de cada coluna e armazenando na última linha
        for (int col = 0; col < 4; col++)
        {
            VetorDeCriterios[4, col] = 0;
            for (int row = 0; row < 4; row++)
            {
                VetorDeCriterios[4, col] += VetorDeCriterios[row, col];
            }
        }
        CalcularMatrizNormalizada();
        CalcularPesoMedio();
    }

    void CalcularMatrizNormalizada()
    {
        for (int row = 0; row < 4; row++)
        {
            for (int col = 0; col < 4; col++)
            {
                if (VetorDeCriterios[4, col] != 0)
                {
                    MatrizNormalizada[row, col] = VetorDeCriterios[row, col] / VetorDeCriterios[4, col];
                }
                else
                {
                    MatrizNormalizada[row, col] = 0;
                }
            }
        }
    }

    void CalcularPesoMedio()
    {
        for (int row = 0; row < 4; row++)
        {
            decimal somaLinha = 0;
            for (int col = 0; col < 4; col++)
            {
                somaLinha += MatrizNormalizada[row, col];
            }
            MatrizNormalizada[row, 4] = somaLinha / 4;
        }
    }

    public void CalcularPesos()
    {
        // Filtrar motores com base no valor da força desejada
        decimal valorForcaMaxima = valorForcaDesejada * 1.5m; // 50% acima do valor desejado

        motoresFiltrados = motores.Where(m =>
            m.ForcaMaxima >= valorForcaDesejada &&
            m.ForcaMaxima <= valorForcaMaxima).ToList();

        if (!motoresFiltrados.Any())
        {
            MotoresComPontuacao.Clear();
            return;
        }

        // Definir pesos relativos aos critérios com base nos motores filtrados
        decimal precoMin = motoresFiltrados.Min(m => m.Valor);
        decimal precoMax = motoresFiltrados.Max(m => m.Valor);
        int prazoMin = motoresFiltrados.Min(m => m.Prazo);
        int prazoMax = motoresFiltrados.Max(m => m.Prazo);
        int velocidadeMin = motoresFiltrados.Min(m => m.RpmMedio);
        int velocidadeMax = motoresFiltrados.Max(m => m.RpmMedio);
        decimal forcaMin = motoresFiltrados.Min(m => m.ForcaMedia);
        decimal forcaMax = motoresFiltrados.Max(m => m.ForcaMedia);

        MotoresComPontuacao.Clear();

        foreach (var motor in motoresFiltrados)
        {
            motor.Pontuacoes = new List<Pontuacao>();

            // Calcula a pontuação de cada critério
            motor.Pontuacoes.Add(new Pontuacao
                {
                    Titulo = "Preço",
                    Pontos = DefinirPeso(motor.Valor, precoMin, precoMax, inverso: true)
                });
            motor.Pontuacoes.Add(new Pontuacao
                {
                    Titulo = "Velocidade",
                    Pontos = DefinirPeso(motor.RpmMedio, velocidadeMin, velocidadeMax)
                });
            motor.Pontuacoes.Add(new Pontuacao
                {
                    Titulo = "Força",
                    Pontos = DefinirPeso(motor.ForcaMedia, forcaMin, forcaMax)
                });
            motor.Pontuacoes.Add(new Pontuacao
                {
                    Titulo = "Prazo",
                    Pontos = DefinirPeso(motor.Prazo, prazoMin, prazoMax, inverso: true)
                });

            // Calcula a pontuação total do motor
            //motor.Pontuacao = motor.Pontuacoes.Sum(p => p.Pontos);
            MotoresComPontuacao.Add(motor);
        }
    }

    public int DefinirPeso(decimal valor, decimal min, decimal max, bool inverso = false)
    {
        if (min == max) return 1;
        if (inverso)
        {
            return (int)Math.Round((1 - ((valor - min) / (max - min))) * 6 + 1);
        }
        else
        {
            return (int)Math.Round(((valor - min) / (max - min)) * 6 + 1);
        }
    }

    public void CalcularPontuacao()
    {
        foreach (var motor in MotoresComPontuacao)
        {
            // Inicializa a pontuação total do motor
            motor.Pontuacao = 0;

            // Itera sobre cada pontuação e calcula o valor ponderado
            foreach (var pontuacao in motor.Pontuacoes)
            {
                // Associa o índice do critério com base no título
                int indice = pontuacao.Titulo switch
                {
                    "Preço" => 0,
                    "Velocidade" => 1,
                    "Força" => 2,
                    "Prazo" => 3,
                    _ => throw new ArgumentException($"Critério desconhecido: {pontuacao.Titulo}")
                };

                // Calcula a pontuação ponderada
                motor.Pontuacao += pontuacao.Pontos * MatrizNormalizada[indice, 4];
            }

            
        }
        MotoresComPontuacao = MotoresComPontuacao
        .OrderByDescending(x => x.Pontuacao)
        .ToList();
    }

}
